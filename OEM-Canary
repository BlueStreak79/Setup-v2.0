Add-Type -AssemblyName PresentationFramework

function Show-Popup($title, $message) {
    [System.Windows.MessageBox]::Show($message, $title)
}

function Is-Activated {
    $products = Get-CimInstance -ClassName SoftwareLicensingProduct | Where-Object { $_.Description -like "Windows*" -and $_.LicenseStatus -eq 1 }
    return $products.Count -gt 0
}

function Get-OEMKey {
    try {
        $svc = Get-CimInstance -ClassName SoftwareLicensingService
        return $svc.OA3xOriginalProductKey
    } catch { return $null }
}

function Get-ActivatedKey {
    $products = Get-CimInstance -ClassName SoftwareLicensingProduct | Where-Object { $_.Description -like "Windows*" -and $_.LicenseStatus -eq 1 }
    return ($products | Select-Object -First 1).PartialProductKey
}

function Get-Edition {
    (Get-CimInstance -ClassName Win32_OperatingSystem).Caption
}

# Relaunch as Administrator if needed
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Start-Process powershell.exe "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
    exit
}

$edition = Get-Edition

if (Is-Activated) {
    $oemKey = Get-OEMKey
    $activatedKey = Get-ActivatedKey
    if ($oemKey) {
        $oemLast5 = $oemKey.Substring($oemKey.Length - 5)
        if ($activatedKey -and $oemLast5 -eq $activatedKey) {
            $msg = "Windows is already activated.`nOEM key matches activated key: $activatedKey`nEdition: $edition"
        } else {
            $msg = "Windows is already activated.`nOEM key ($oemLast5) does NOT match activated key ($activatedKey)`nEdition: $edition"
        }
    } else {
        $msg = "Windows is already activated.`nNo OEM key found for comparison.`nActivated key ending: $activatedKey`nEdition: $edition"
    }
    Write-Output $msg
    Show-Popup "Activation Status" $msg
    exit
}

# Not activated -- attempt activation!
$oemKey = Get-OEMKey
$activated = $false
$methodUsed = "None"

if ($oemKey) {
    try {
        Write-Output "Trying SLMGR activation..."
        & cscript.exe //Nologo C:\Windows\System32\slmgr.vbs /ipk $oemKey | Out-Null
        & cscript.exe //Nologo C:\Windows\System32\slmgr.vbs /ato | Out-Null
        Start-Sleep -Seconds 2
        if (Is-Activated) {
            $activated = $true
            $methodUsed = "SLMGR"
        }
    } catch {}
    if (-not $activated) {
        try {
            Write-Output "Trying WMI activation..."
            $svc = Get-CimInstance -ClassName SoftwareLicensingService
            $svc | Invoke-CimMethod -MethodName InstallProductKey -Arguments @{ ProductKey = $oemKey } | Out-Null
            $products = Get-CimInstance -ClassName SoftwareLicensingProduct | Where-Object { $_.PartialProductKey -ne $null -and $_.ApplicationId -eq '55c92734-d682-4d71-983e-d6ec3f16059f' -and -not $_.LicenseIsAddon }
            foreach ($product in $products) {
                $res = Invoke-CimMethod -InputObject $product -MethodName Activate
                if ($res.ReturnValue -eq 0) {
                    $activated = $true
                    $methodUsed = "WMI"
                    break
                }
            }
        } catch {}
    }
} else {
    Write-Output "No OEM key, running Canary fallback."
    # Uncomment and set your Canary script, if desired:
    # iex (irm 'https://raw.githubusercontent.com/BlueStreak79/Setup/refs/heads/main/run.ps1')
    $methodUsed = "Canary"
    $activated = Is-Activated
}

if ($activated) {
    $msg = "Windows activation was SUCCESSFUL with: $methodUsed.`nEdition: $edition"
} else {
    $msg = "Windows activation FAILED.`nMethod attempted: $methodUsed.`nEdition: $edition"
}
Write-Output $msg
Show-Popup "Activation Result" $msg
