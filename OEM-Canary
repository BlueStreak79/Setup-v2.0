# Ensure running as admin and set execution policy
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    $params = "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`""
    Start-Process powershell.exe $params -Verb RunAs
    exit
}

Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

Add-Type -AssemblyName PresentationFramework

function Show-Popup($title, $msg) {
    [System.Windows.MessageBox]::Show($msg, $title)
}

function Is-Activated {
    $p = Get-CimInstance -ClassName SoftwareLicensingProduct | Where-Object { $_.Description -like "Windows*" -and $_.LicenseStatus -eq 1 }
    return $p.Count -gt 0
}

function Get-OEMKey {
    try { (Get-CimInstance -ClassName SoftwareLicensingService).OA3xOriginalProductKey } catch { $null }
}

function Get-ActivatedKey {
    $p = Get-CimInstance -ClassName SoftwareLicensingProduct | Where-Object { $_.Description -like "Windows*" -and $_.LicenseStatus -eq 1 }
    ($p | Select-Object -First 1).PartialProductKey
}

function Get-Edition {
    (Get-CimInstance -ClassName Win32_OperatingSystem).Caption
}

# Attempt to map key pattern to associated edition (best effort, for clear output)
function Detect-Key-Edition($key) {
    if ($null -eq $key) { return "Unknown" }
    switch -Regex ($key) {
        "NRG8B|6F4BB|2TYW3|VK7JG|NPPR9|YTMG3" { return "Pro" }
        "TX9XD|BT79Q" { return "Home" }
        "3V66T" { return "Enterprise" }
        "WNMTR|NPPR9" { return "Education" }
        default { return "Unknown" }
    }
}

$edition = Get-Edition
$oemKey = Get-OEMKey
$keyEdition = Detect-Key-Edition($oemKey)

# Show OEM key and edition in cyan if found
if ($oemKey) {
    Write-Host "Detected OEM Key: $oemKey (Key Edition: $keyEdition, Installed: $edition)" -ForegroundColor Cyan
} else {
    Write-Host "No embedded OEM key found. (Installed: $edition)" -ForegroundColor Cyan
    # Canary fallback immediately
    Write-Output "No OEM key, running Canary fallback immediately."
    # Uncomment below if using your canary script:
    # iex (irm 'https://raw.githubusercontent.com/BlueStreak79/Setup/refs/heads/main/run.ps1')
    $msg = "No embedded OEM key found.`nEdition: $edition.`nCanary fallback triggered."
    Show-Popup "Activation Result" $msg
    exit
}

if (Is-Activated) {
    $activatedKey = Get-ActivatedKey
    if ($oemKey) {
        $oemLast5 = $oemKey.Substring($oemKey.Length - 5)
        if ($activatedKey -and $oemLast5 -eq $activatedKey) {
            $msg = "Windows is already activated.`nOEM key matches activated key: $activatedKey`nInstalled: $edition (Key Edition: $keyEdition)"
        } else {
            $msg = "Windows is already activated.`nOEM key ($oemLast5, $keyEdition) does NOT match activated key ($activatedKey)`nInstalled: $edition"
        }
    } else {
        $msg = "Windows is already activated.`nNo OEM key found for comparison.`nActivated key ending: $activatedKey`nInstalled: $edition"
    }
    Write-Output $msg
    Show-Popup "Activation Status" $msg
    exit
}

# Not activated -- attempt activation!
$activated = $false
$methodUsed = "None"
$slmgrError = $null
$wmiError = $null

if ($oemKey) {
    try {
        Write-Output "Trying SLMGR activation..."
        & cscript.exe //Nologo C:\Windows\System32\slmgr.vbs /ipk $oemKey | Out-Null
        & cscript.exe //Nologo C:\Windows\System32\slmgr.vbs /ato | Out-Null
        Start-Sleep -Seconds 2
        if (Is-Activated) {
            $activated = $true
            $methodUsed = "SLMGR"
        }
    } catch { $slmgrError = $_ }
    if (-not $activated) {
        try {
            Write-Output "Trying WMI activation..."
            $svc = Get-CimInstance -ClassName SoftwareLicensingService
            $svc | Invoke-CimMethod -MethodName InstallProductKey -Arguments @{ ProductKey = $oemKey } | Out-Null
            $products = Get-CimInstance -ClassName SoftwareLicensingProduct | Where-Object { $_.PartialProductKey -ne $null -and $_.ApplicationId -eq '55c92734-d682-4d71-983e-d6ec3f16059f' -and -not $_.LicenseIsAddon }
            foreach ($product in $products) {
                $res = Invoke-CimMethod -InputObject $product -MethodName Activate
                if ($res.ReturnValue -eq 0) {
                    $activated = $true
                    $methodUsed = "WMI"
                    break
                }
            }
        } catch { $wmiError = $_ }
    }
}

# Compose clear status output if failure due to edition mismatch or key invalid
if ($activated) {
    $msg = "Windows activation was SUCCESSFUL with: $methodUsed.`nInstalled: $edition (Key Edition: $keyEdition)"
} else {
    if ($slmgrError -or $wmiError) {
        $details = if ($slmgrError) { $slmgrError.Exception.Message } elseif ($wmiError) { $wmiError.Exception.Message } else { "Unknown error" }
        $msg = "Windows activation FAILED.`nInstalled version: $edition`nOEM key is for: $keyEdition`n(Details: $details)`nMethod attempted: $methodUsed"
    } else {
        $msg = "Windows activation FAILED.`nInstalled version: $edition`nOEM key is for: $keyEdition`nMethod attempted: $methodUsed"
    }
}
Write-Output $msg
Show-Popup "Activation Result" $msg
